/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author kumark2
 */

package javaapplicationtest;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JFileChooser;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Iterator;

import javax.swing.*;
import java.awt.*;
import java.text.*;
import java.io.*;

class MyCustomFilter extends javax.swing.filechooser.FileFilter {
	@Override
	public boolean accept(File file) {
		// Allow only directories, or files with ".txt" extension
		return file.isDirectory() || file.getAbsolutePath().endsWith(".json");
	}

	@Override
	public String getDescription() {
		// This description will be displayed in the dialog,
		// hard-coded = ugly, should be done via I18N
		return "JSON documents (*.json)";
	}
}

public class FileChooser extends javax.swing.JFrame {

	/**
	 * Creates new form FileChooser
	 */
	public String created;
	public String startedBy;
	public String file;

	// int size = 0;

	public FileChooser() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jMenuBar1 = new javax.swing.JMenuBar();
		jMenu1 = new javax.swing.JMenu();
		jMenu2 = new javax.swing.JMenu();
		jMenuItem1 = new javax.swing.JMenuItem();
		fileChooser = new javax.swing.JFileChooser();
		jScrollPane2 = new javax.swing.JScrollPane();
		jTable1 = new javax.swing.JTable();
		measurement = new javax.swing.JButton();
		jScrollPane3 = new javax.swing.JScrollPane();
		jTable2 = new javax.swing.JTable();
		jPanel1 = new javax.swing.JPanel();
		jScrollPane4 = new javax.swing.JScrollPane();
		jTextPane1 = new javax.swing.JTextPane();
		jMenuBar2 = new javax.swing.JMenuBar();
		File = new javax.swing.JMenu();
		Open = new javax.swing.JMenuItem();
		Exit = new javax.swing.JMenuItem();

		jMenu1.setText("File");
		jMenuBar1.add(jMenu1);

		jMenu2.setText("Edit");
		jMenuBar1.add(jMenu2);

		jMenuItem1.setText("jMenuItem1");

		fileChooser.setDialogTitle("Open File");
		fileChooser.setFileFilter(new MyCustomFilter());

		jTable1.setModel(new javax.swing.table.DefaultTableModel(
				new Object[][] { { null, null, null, null },
						{ null, null, null, null }, { null, null, null, null },
						{ null, null, null, null } }, new String[] { "Title 1",
						"Title 2", "Title 3", "Title 4" }));
		jScrollPane2.setViewportView(jTable1);

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("NetREADER Application");

		measurement.setText("Measurement");

		jTable2.setModel(new javax.swing.table.DefaultTableModel(
				new Object[][] { { null, null, null, null },
						{ null, null, null, null }, { null, null, null, null },
						{ null, null, null, null } }, new String[] { "Title 1",
						"Title 2", "Title 3", "Title 4" }));
		jScrollPane3.setViewportView(jTable2);

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(
				jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 100,
				Short.MAX_VALUE));
		jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 100,
				Short.MAX_VALUE));

		jScrollPane4.setViewportView(jTextPane1);

		File.setText("File");
		File.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				FileActionPerformed(evt);
			}
		});

		Open.setText(" Open");
		Open.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				OpenActionPerformed(evt);
			}
		});
		File.add(Open);

		Exit.setText("Exit");
		Exit.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				ExitActionPerformed(evt);
			}
		});
		File.add(Exit);

		jMenuBar2.add(File);

		setJMenuBar(jMenuBar2);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(
														layout.createSequentialGroup()
																.addContainerGap()
																.addComponent(
																		measurement))
												.addGroup(
														layout.createSequentialGroup()
																.addGap(41, 41,
																		41)
																.addComponent(
																		jPanel1,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.PREFERRED_SIZE)))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(
														jScrollPane3,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														740, Short.MAX_VALUE)
												.addComponent(jScrollPane4))
								.addContainerGap()));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(
														layout.createSequentialGroup()
																.addComponent(
																		measurement)
																.addGap(13, 13,
																		13)
																.addComponent(
																		jPanel1,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.PREFERRED_SIZE))
												.addComponent(
														jScrollPane4,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														136,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGap(18, 18, 18)
								.addComponent(jScrollPane3,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										221, Short.MAX_VALUE).addContainerGap()));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void FileActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_FileActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_FileActionPerformed

	private void OpenActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_OpenActionPerformed
		// TODO add your handling code here:
		int returnVal = fileChooser.showOpenDialog(this);
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			file = fileChooser.getSelectedFile().getAbsolutePath();
			JTextPane textPane = new JTextPane();
			String s[] = readFileJson(file);
			System.out.println(s[0]);

			// String a = fileChooser.getS
			// String file1 =
			// setText(fileCho.getSelectedFile().getAbsolutePath());

			// What to do with the file, e.g. display it in a TextArea
			// JavaApplicationTest.jsonParser(file);
			textPane.setText("Start");
			textPane.setText("\n" + "Created: " + s[0] + "\n");
			textPane.setText("\n" + "Started: " + s[1] + "\n");

		} else {
			System.out.println("File access cancelled by user.");
		}// GEN-LAST:event_OpenActionPerformed
	}

	private void ExitActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_ExitActionPerformed
		// TODO add your handling code here:
		System.exit(0);
	}// GEN-LAST:event_ExitActionPerformed

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed"
		// desc=" Look and feel setting code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase
		 * /tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
					.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(FileChooser.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(FileChooser.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(FileChooser.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(FileChooser.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new FileChooser().setVisible(true);
			}
		});
	}

	public String[] readFileJson(String file) {

		try {

			String filePath = file;
			// read the json file
			FileReader reader = new FileReader(filePath);

			JSONParser jsonParser = new JSONParser();
			JSONArray jsonArray = (JSONArray) jsonParser.parse(reader);

			int size = jsonArray.size();

			for (int i = 0; i < size; i++) {
				JSONObject object = (JSONObject) jsonArray.get(i);
				// OpenActionPerformed.textarea.append("\n" + object);

				created = (String) object.get("createdAt");
				textarea.append("\n" + "Created At: " + created);

				startedBy = (String) object.get("startedBy");
				textarea.append("\n" + "Started By: " + startedBy);

				String startedAt = (String) object.get("startedAt");
				textarea.append("\n" + "started At: " + startedAt);

				String ticketId = (String) object.get("ticketId");
				textarea.append("\n" + "Ticket Id: " + ticketId);

				String finishedAt = (String) object.get("finishedAt");
				textarea.append("\n" + "Finished At: " + finishedAt + "\n");


				Font font = new Font("Serif", Font.PLAIN, 12);
				textarea.setFont(font);
				textarea.setForeground(Color.BLUE);
				textarea.append("\n" + "<----Next Measurement---->");
			}

		} catch (FileNotFoundException ex) {
			ex.printStackTrace();
		} catch (IOException ex) {
			ex.printStackTrace();
		} catch (ParseException ex) {
			ex.printStackTrace();
		} catch (NullPointerException ex) {
			ex.printStackTrace();
		}
		
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JMenuItem Exit;
	private javax.swing.JMenu File;
	private javax.swing.JMenuItem Open;
	private javax.swing.JFileChooser fileChooser;
	private javax.swing.JMenu jMenu1;
	private javax.swing.JMenu jMenu2;
	private javax.swing.JMenuBar jMenuBar1;
	private javax.swing.JMenuBar jMenuBar2;
	private javax.swing.JMenuItem jMenuItem1;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JScrollPane jScrollPane3;
	private javax.swing.JScrollPane jScrollPane4;
	private javax.swing.JTable jTable1;
	private javax.swing.JTable jTable2;
	private javax.swing.JTextPane jTextPane1;
	private javax.swing.JButton measurement;
	// End of variables declaration//GEN-END:variables
}
